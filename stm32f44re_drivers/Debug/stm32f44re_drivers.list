
stm32f44re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000380  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000380  08000380  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000380  08000380  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800038c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800038c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001397  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000030e  00000000  00000000  000213cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000068  00000000  00000000  000216e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  00021748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000021ac  00000000  00000000  00021788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000bd5  00000000  00000000  00023934  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008b3c  00000000  00000000  00024509  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002d045  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000090  00000000  00000000  0002d0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000368 	.word	0x08000368

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000368 	.word	0x08000368

08000204 <main>:

#include <stdint.h>
#include "rcc.h"
local uint8 i = 0;
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	rcc_system_clk_config(true);
 8000208:	2001      	movs	r0, #1
 800020a:	f000 f829 	bl	8000260 <rcc_system_clk_config>
    /* Loop forever */
	//for(;;){
		i++;
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <main+0x58>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	3301      	adds	r3, #1
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <main+0x58>)
 8000218:	701a      	strb	r2, [r3, #0]
		i++;
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <main+0x58>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3301      	adds	r3, #1
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x58>)
 8000224:	701a      	strb	r2, [r3, #0]
		i++;
 8000226:	4b0d      	ldr	r3, [pc, #52]	; (800025c <main+0x58>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	3301      	adds	r3, #1
 800022c:	b2da      	uxtb	r2, r3
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x58>)
 8000230:	701a      	strb	r2, [r3, #0]
		i++;
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <main+0x58>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	3301      	adds	r3, #1
 8000238:	b2da      	uxtb	r2, r3
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <main+0x58>)
 800023c:	701a      	strb	r2, [r3, #0]
		i++;
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x58>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x58>)
 8000248:	701a      	strb	r2, [r3, #0]
		i++;
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <main+0x58>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4b02      	ldr	r3, [pc, #8]	; (800025c <main+0x58>)
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	2300      	movs	r3, #0
		//if (i == 100)
			//break;
	//}
}
 8000258:	4618      	mov	r0, r3
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000020 	.word	0x20000020

08000260 <rcc_system_clk_config>:
//-------------------------------------------------------------------------------
//global functions
//-------------------------------------------------------------------------------

global void rcc_system_clk_config(bool hse_bypassed)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	//set up the pll configure register before proceeding
	rcc_regs->rcc_pllcfgr = RCC_PLLCFGR_SETUP;
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <rcc_system_clk_config+0x5c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a14      	ldr	r2, [pc, #80]	; (80002c0 <rcc_system_clk_config+0x60>)
 8000270:	605a      	str	r2, [r3, #4]

	//configure the cr register based on whether hse is bypassed (crystal not used)
	//the hsi clock source is not yet disabled
	rcc_regs->rcc_cr = hse_bypassed ? RCC_CR_HSE_BYPASSED : RCC_CR_HSE_CRYSTAL;
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <rcc_system_clk_config+0x1c>
 8000278:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <rcc_system_clk_config+0x64>)
 800027a:	e000      	b.n	800027e <rcc_system_clk_config+0x1e>
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <rcc_system_clk_config+0x68>)
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <rcc_system_clk_config+0x5c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	601a      	str	r2, [r3, #0]

	//wait till HSE is ready and stable
	while(rcc_regs->rcc_cr & RCC_CR_HSERDY);
 8000284:	bf00      	nop
 8000286:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <rcc_system_clk_config+0x5c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1f8      	bne.n	8000286 <rcc_system_clk_config+0x26>

	//wait till PLL is locked
	while(rcc_regs->rcc_cr & RCC_CR_PLLRDY);
 8000294:	bf00      	nop
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <rcc_system_clk_config+0x5c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1f8      	bne.n	8000296 <rcc_system_clk_config+0x36>
	//pull the clock switch to use pllclk as systemclk
	//set up the clock prescalers for ahb, apb1 and apb2
	//ahb1 runs at 180 MHz just as the system clock
	//apb1 runs at 45 MHz
	//ahb2 runs at 90 MHz
	rcc_regs->rcc_cfgr = RCC_CFGR_SETUP;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <rcc_system_clk_config+0x5c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f24b 4202 	movw	r2, #46082	; 0xb402
 80002ac:	609a      	str	r2, [r3, #8]


}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000000 	.word	0x20000000
 80002c0:	22402d04 	.word	0x22402d04
 80002c4:	01050001 	.word	0x01050001
 80002c8:	01010001 	.word	0x01010001

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	; (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ff81 	bl	8000204 <main>

08000302 <LoopForever>:

LoopForever:
    b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000318:	20000024 	.word	0x20000024

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4e0d      	ldr	r6, [pc, #52]	; (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	; (800035c <__libc_init_array+0x3c>)
 8000326:	1ba4      	subs	r4, r4, r6
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2500      	movs	r5, #0
 800032c:	42a5      	cmp	r5, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4e0b      	ldr	r6, [pc, #44]	; (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	; (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1ba4      	subs	r4, r4, r6
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2500      	movs	r5, #0
 800033e:	42a5      	cmp	r5, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000348:	4798      	blx	r3
 800034a:	3501      	adds	r5, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000352:	4798      	blx	r3
 8000354:	3501      	adds	r5, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
